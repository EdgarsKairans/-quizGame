/*!
 * A lightweight, dependency-free and responsive javascript plugin for particle backgrounds.
 *
 * @author Marc Bruederlin <hello@marcbruederlin.com>
 * @version 2.2.3
 * @license MIT
 * @see https://github.com/marcbruederlin/particles.js
 */
var Particles = (function (e, t) {
	"use strict";
	var n,
		i = {};
	function o(e, t) {
		return e.x < t.x ? -1 : e.x > t.x ? 1 : e.y < t.y ? -1 : e.y > t.y ? 1 : 0;
	}
	return (
		((n = (function () {
			return function () {
				var e = this;
				(e.defaults = {
					responsive: null,
					selector: null,
					maxParticles: 100,
					sizeVariations: 3,
					showParticles: !0,
					speed: 0.5,
					color: "#000000",
					minDistance: 120,
					connectParticles: !1,
				}),
					(e.element = null),
					(e.context = null),
					(e.ratio = null),
					(e.breakpoints = []),
					(e.activeBreakpoint = null),
					(e.breakpointSettings = []),
					(e.originalSettings = null),
					(e.storage = []),
					(e.usingPolyfill = !1);
			};
		})()).prototype.init = function (e) {
			var t = this;
			return (
				(t.options = t._extend(t.defaults, e)),
				(t.originalSettings = JSON.parse(JSON.stringify(t.options))),
				(t._animate = t._animate.bind(t)),
				t._initializeCanvas(),
				t._initializeEvents(),
				t._registerBreakpoints(),
				t._checkResponsive(),
				t._initializeStorage(),
				t._animate(),
				t
			);
		}),
		(n.prototype.destroy = function () {
			var t = this;
			(t.storage = []),
				t.element.remove(),
				e.removeEventListener("resize", t.listener, !1),
				e.clearTimeout(t._animation),
				cancelAnimationFrame(t._animation);
		}),
		(n.prototype._initializeCanvas = function () {
			var n,
				i,
				o = this;
			if (!o.options.selector)
				return (
					console.warn(
						"particles.js: No selector specified! Check https://github.com/marcbruederlin/particles.js#options"
					),
					!1
				);
			(o.element = t.querySelector(o.options.selector)),
				(o.context = o.element.getContext("2d")),
				(n = e.devicePixelRatio || 1),
				(i =
					o.context.webkitBackingStorePixelRatio ||
					o.context.mozBackingStorePixelRatio ||
					o.context.msBackingStorePixelRatio ||
					o.context.oBackingStorePixelRatio ||
					o.context.backingStorePixelRatio ||
					1),
				(o.ratio = n / i),
				(o.element.width = o.element.offsetParent
					? o.element.offsetParent.clientWidth * o.ratio
					: o.element.clientWidth * o.ratio),
				o.element.offsetParent && "BODY" === o.element.offsetParent.nodeName
					? (o.element.height = e.innerHeight * o.ratio)
					: (o.element.height = o.element.offsetParent
							? o.element.offsetParent.clientHeight * o.ratio
							: o.element.clientHeight * o.ratio),
				(o.element.style.width = "100%"),
				(o.element.style.height = "100%"),
				o.context.scale(o.ratio, o.ratio);
		}),
		(n.prototype._initializeEvents = function () {
			var t = this;
			(t.listener = function () {
				t._resize();
			}.bind(this)),
				e.addEventListener("resize", t.listener, !1);
		}),
		(n.prototype._initializeStorage = function () {
			var e = this;
			e.storage = [];
			for (var t = e.options.maxParticles; t--; )
				e.storage.push(new i(e.context, e.options));
		}),
		(n.prototype._registerBreakpoints = function () {
			var e,
				t,
				n,
				i = this,
				o = i.options.responsive || null;
			if ("object" == typeof o && null !== o && o.length) {
				for (e in o)
					if (
						((n = i.breakpoints.length - 1),
						(t = o[e].breakpoint),
						o.hasOwnProperty(e))
					) {
						for (; n >= 0; )
							i.breakpoints[n] &&
								i.breakpoints[n] === t &&
								i.breakpoints.splice(n, 1),
								n--;
						i.breakpoints.push(t), (i.breakpointSettings[t] = o[e].options);
					}
				i.breakpoints.sort(function (e, t) {
					return t - e;
				});
			}
		}),
		(n.prototype._checkResponsive = function () {
			var t,
				n = this,
				i = !1,
				o = e.innerWidth;
			if (
				n.options.responsive &&
				n.options.responsive.length &&
				null !== n.options.responsive
			) {
				for (t in ((i = null), n.breakpoints))
					n.breakpoints.hasOwnProperty(t) &&
						o <= n.breakpoints[t] &&
						(i = n.breakpoints[t]);
				null !== i
					? ((n.activeBreakpoint = i),
					  (n.options = n._extend(n.options, n.breakpointSettings[i])))
					: null !== n.activeBreakpoint &&
					  ((n.activeBreakpoint = null),
					  (i = null),
					  (n.options = n._extend(n.options, n.originalSettings)));
			}
		}),
		(n.prototype._refresh = function () {
			this._initializeStorage(), this._draw();
		}),
		(n.prototype._resize = function () {
			var t = this;
			(t.element.width = t.element.offsetParent
				? t.element.offsetParent.clientWidth * t.ratio
				: t.element.clientWidth * t.ratio),
				t.element.offsetParent && "BODY" === t.element.offsetParent.nodeName
					? (t.element.height = e.innerHeight * t.ratio)
					: (t.element.height = t.element.offsetParent
							? t.element.offsetParent.clientHeight * t.ratio
							: t.element.clientHeight * t.ratio),
				t.context.scale(t.ratio, t.ratio),
				clearTimeout(t.windowDelay),
				(t.windowDelay = e.setTimeout(function () {
					t._checkResponsive(), t._refresh();
				}, 50));
		}),
		(n.prototype._animate = function () {
			var t = this;
			t._draw(), (t._animation = e.requestAnimFrame(t._animate));
		}),
		(n.prototype.resumeAnimation = function () {
			this._animation || this._animate();
		}),
		(n.prototype.pauseAnimation = function () {
			var t = this;
			if (t._animation) {
				if (t.usingPolyfill) e.clearTimeout(t._animation);
				else
					(
						e.cancelAnimationFrame ||
						e.webkitCancelAnimationFrame ||
						e.mozCancelAnimationFrame
					)(t._animation);
				t._animation = null;
			}
		}),
		(n.prototype._draw = function () {
			var t = this,
				n = t.element,
				i = n.offsetParent ? n.offsetParent.clientWidth : n.clientWidth,
				r = n.offsetParent ? n.offsetParent.clientHeight : n.clientHeight,
				a = t.options.showParticles,
				s = t.storage;
			n.offsetParent &&
				"BODY" === n.offsetParent.nodeName &&
				(r = e.innerHeight),
				t.context.clearRect(0, 0, n.width, n.height),
				t.context.beginPath();
			for (var l = s.length; l--; ) {
				var c = s[l];
				a && c._draw(), c._updateCoordinates(i, r);
			}
			t.options.connectParticles && (s.sort(o), t._updateEdges());
		}),
		(n.prototype._updateEdges = function () {
			for (
				var e = this,
					t = e.options.minDistance,
					n = Math.sqrt,
					i = Math.abs,
					o = e.storage,
					r = o.length,
					a = 0;
				a < r;
				a++
			)
				for (var s = o[a], l = a + 1; l < r; l++) {
					var c,
						f = o[l],
						p = s.x - f.x,
						h = s.y - f.y;
					if (((c = n(p * p + h * h)), i(p) > t)) break;
					c <= t && e._drawEdge(s, f, 1.2 - c / t);
				}
		}),
		(n.prototype._drawEdge = function (e, t, n) {
			var i = this,
				o = i.context.createLinearGradient(e.x, e.y, t.x, t.y),
				r = this._hex2rgb(e.color),
				a = this._hex2rgb(t.color);
			o.addColorStop(0, "rgba(" + r.r + "," + r.g + "," + r.b + "," + n + ")"),
				o.addColorStop(
					1,
					"rgba(" + a.r + "," + a.g + "," + a.b + "," + n + ")"
				),
				i.context.beginPath(),
				(i.context.strokeStyle = o),
				i.context.moveTo(e.x, e.y),
				i.context.lineTo(t.x, t.y),
				i.context.stroke(),
				i.context.fill(),
				i.context.closePath();
		}),
		(n.prototype._extend = function (e, t) {
			return (
				Object.keys(t).forEach(function (n) {
					e[n] = t[n];
				}),
				e
			);
		}),
		(n.prototype._hex2rgb = function (e) {
			var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
			return t
				? {
						r: parseInt(t[1], 16),
						g: parseInt(t[2], 16),
						b: parseInt(t[3], 16),
				  }
				: null;
		}),
		((i = function (n, i) {
			var o = this,
				r = Math.random,
				a = i.speed,
				s =
					i.color instanceof Array
						? i.color[Math.floor(Math.random() * i.color.length)]
						: i.color;
			(o.context = n), (o.options = i);
			var l = t.querySelector(i.selector);
			(o.x = l.offsetParent
				? r() * l.offsetParent.clientWidth
				: r() * l.clientWidth),
				l.offsetParent && "BODY" === l.offsetParent.nodeName
					? (o.y = r() * e.innerHeight)
					: (o.y = l.offsetParent
							? r() * l.offsetParent.clientHeight
							: r() * l.clientHeight),
				(o.vx = r() * a * 2 - a),
				(o.vy = r() * a * 2 - a),
				(o.radius = r() * r() * i.sizeVariations),
				(o.color = s),
				o._draw();
		}).prototype._draw = function () {
			var e = this;
			e.context.save(),
				e.context.translate(e.x, e.y),
				e.context.moveTo(0, 0),
				e.context.beginPath(),
				e.context.arc(0, 0, e.radius, 0, 2 * Math.PI, !1),
				(e.context.fillStyle = e.color),
				e.context.fill(),
				e.context.restore();
		}),
		(i.prototype._updateCoordinates = function (e, t) {
			var n = this,
				i = n.x + this.vx,
				o = n.y + this.vy,
				r = n.radius;
			i + r > e ? (i = r) : i - r < 0 && (i = e - r),
				o + r > t ? (o = r) : o - r < 0 && (o = t - r),
				(n.x = i),
				(n.y = o);
		}),
		(e.requestAnimFrame = (function () {
			var t =
				e.requestAnimationFrame ||
				e.webkitRequestAnimationFrame ||
				e.mozRequestAnimationFrame;
			return (
				t ||
				((this._usingPolyfill = !0),
				function (t) {
					return e.setTimeout(t, 1e3 / 60);
				})
			);
		})()),
		new n()
	);
})(window, document);
!(function () {
	"use strict";
	"function" == typeof define && define.amd
		? define("Particles", function () {
				return Particles;
		  })
		: "undefined" != typeof module && module.exports
		? (module.exports = Particles)
		: (window.Particles = Particles);
})();

export default Particles ;

// "use strict";

// //animation

// const county = document.querySelector(".main__content-county"),
//         capital = document.querySelector(".main__content-capital"),
//         world = document.querySelector(".main__content-world"),
//         btn = document.querySelector(".main__content-btn"),
//         trueAnswer = document.querySelector(".main__content-btn-true"),
//         falseAnswer = document.querySelector(".main__content-btn-false"),
//         btnAnswer = document.querySelector(".main__game-btn-answer");

// //get menu items

// const allWorld = document.querySelector(".main__menu-allCountries"),
//       europe = document.querySelector(".main__menu-europe"),
//       america = document.querySelector(".main__menu-america"),
//       africa = document.querySelector(".main__menu-africa"),
//       asia = document.querySelector(".main__menu-asia"),
//       oceania = document.querySelector(".main__menu-oceania"),
//       flagMenu = document.querySelector(".main__menu-flagMenu"),
//       flagAndCapital = document.querySelector(".main__flagAndCapital"),
//       flagCapitalAndWorldPart = document.querySelector(".main__menu-flagCapitalWorldPart"),
//       relaxing = document.querySelector(".main__menu-relaxing"),
//       normal = document.querySelector(".main__menu-normal"),
//       hard = document.querySelector(".main__menu-hard");
// //      all = document.querySelectorAll(".main__menu__countries");

// //get game items
// const flag  = document.querySelector(".main__game-flag img"),
//       country1  = document.querySelector(".main__game-country-1"),
//       country2  = document.querySelector(".main__game-country-2"),
//       country3  = document.querySelector(".main__game-country-3"),
//       country4  = document.querySelector(".main__game-country-4"),
//       countriesBox = document.querySelector(".main__game-countries"),
//       countries = document.querySelectorAll(".countries"),
//       capital1  = document.querySelector(".main__game-capital-1"),
//       capital2  = document.querySelector(".main__game-capital-2"),
//       capital3  = document.querySelector(".main__game-capital-3"),
//       capital4  = document.querySelector(".main__game-capital-4"),
//       capitalsBox = document.querySelector(".main__game-capitals"),
//       capitals = document.querySelectorAll(".capital"),
//       worldPart1  = document.querySelector(".main__game-worldPart-1"),
//       worldPart2  = document.querySelector(".main__game-worldPart-2"),
//       worldPart3  = document.querySelector(".main__game-worldPart-3"),
//       worldPart4  = document.querySelector(".main__game-worldPart-4"),
//       worldPart5  = document.querySelector(".main__game-worldPart-5"),
//       worldPartBox = document.querySelector(".main__game-worldPart"),
//       worldPart = document.querySelectorAll(".worldPart"),
//       answer = document.querySelector(".main__game-btn"),
//       btnNext = document.querySelector(".main__game-btn-next"),
//       mainGameBox = document.querySelector(".main__game"),
//       countryAnswer = document.querySelectorAll(".country-answer");

// const allCountries = [
// ['Afghanistan', 'Kabul', 'Asia', "af"],
// ['Albania', 'Tirana', 'Europe', "al"],
// ['Algeria', 'Algiers', 'Africa', "dz"],
// ['Andorra', 'Andorra la Vella', 'Europe', "ad"],
// ['Antigua and Barbuda', 'St. Johns', 'America', "ag"],
// ['Argentina', 'Buenos Aires', 'America', "ar"],
// ['Armenia', 'Yerevan', 'Asia',"am"],
// ['Australia', 'Canberra', 'Oceania', "au"],
// ['Austria', 'Vienna', 'Europe', "at"],
// ['Azerbaijan', 'Baku', 'Asia', "az"],
// ['Bahamas','Nassau', 'America', "bs"],
// ['Bahrain', 'Manama', 'Asia', "bh"],
// ['Bangladesh', 'Dhaka', 'Asia', "bd"],
// ['Barbados', 'Bridgetown', 'America', "bb"],
// ['Belarus', 'Minsk', 'Europe', "by"],
// ['Belgium', 'Brussels', 'Europe', "be"],
// ['Belize', 'Belmopan', 'America', "bz"],
// ['Benin', 'Porto Novo', 'Africa', "bj"],
// ['Bhutan', 'Thimphu', 'Asia', 'bt'],
// ['Bolivia', 'Sucre', 'America', "bo"],
// ['Bosnia and Herzegovina', 'Sarajevo', 'Europe', "ba"],
// ['Botswana', 'Gaborone', 'Africa', "bw"],
// ['Brazil', 'Brasilia', 'America', "br"],
// ['Brunei', 'Bandar Seri Begawan', 'Asia', "bn"],
// ['Bulgaria', 'Sofia', 'Europe', "bg"],
// ['Burkina Faso', 'Ouagadougou', 'Africa', "bf"],
// ['Burundi', 'Bujumbura', 'Africa', "bi"],
// ['Cambodia', 'Phnom Penh', 'Asia', "kh"],
// ['Cameroon', 'Yaoundé' ,'Africa', "cm"],
// ['Canada', 'Ottawa', 'America', "ca"],
// ['Cape Verde', 'Praia', 'Africa', "cv"],
// ['Central African Republic', 'Bangui', 'Africa', "cf"],
// ['Chad', 'N Djamena', 'Africa', "td"],
// ['Chile', 'Santiago', 'America', "cl"],
// ['China', 'Beijing', 'Asia', "cn"],
// ['Colombia', 'Bogota', 'America', "co"],
// ['Comoros', 'Moroni', 'Africa', "km"],
// ['Costa Rica', 'San José', 'America', "cr"],
// ['Croatia', 'Zagreb', 'Europe', "hr"],
// ['Cuba', 'Havana', 'America', "cu"],
// ['Cyprus', 'Nicosia', 'Europe', "cy"],
// ['Czech Republic', 'Prague', 'Europe', "cz"],
// ['Democratic Republic of Congo', 'Kinshasa', 'Africa', "cd"],
// ['Denmark', 'Copenagen', 'Europe', "dk"],
// ['Djibouti', 'Djibouti', 'Africa', "dj"],
// ['Dominica', 'Roseau', 'America', "dm"],
// ['Dominican Republic', 'Santo Domingo', 'America', "do"],
// ['East Timor', 'Dili', 'Oceania', "tl"],
// ['Ecuador', 'Quito', 'America', "ec"],
// ['Egypt', 'Cairo', 'Africa', "eg"],
// ['El Salvador', 'San Salvador', 'America', "sv"],
// ['Equatorial Guinea', 'Malabo', 'Africa', "gq"],
// ['Eritrea', 'Asmara', 'Africa', "er"],
// ['Estonia', 'Tallinn', 'Europe',"ee"],
// ['Eswatini', 'Mbabane', 'Africa', "sz"],
// ['Ethiopia', 'Addis Ababa', 'Africa', "et"],
// ['Fiji', 'Suva', 'Oceania', "fj"],
// ['Finland', 'Helsinki', 'Europe', "fi"],
// ['France', 'Paris', 'Europe', "fr"],
// ['Gabon', 'Libreville', 'Africa', "ga"],
// ['Gambia', 'Banjul', 'Africa', "gm"],
// ['Georgia', 'Tbilisi', 'Asia', "ge"],
// ['Germany', 'Berlin', 'Europe', "de"],
// ['Ghana', 'Accra', 'Africa', "gh"],
// ['Greece', 'Athens', 'Europe', "gr"],
// ['Grenada', "St. George's", 'America', "gd"],
// ['Guatemala', 'Guatemala City', 'America', "gt"],
// ['Guinea', 'Conakry', 'Africa', "gn"],
// ['Guinea-Bissau', 'Bissau', 'Africa', "gw"],
// ['Guyana', 'Georgetown', 'America', "gy"],
// ['Haiti', 'Port-au-Prince', 'America', "ht"],
// ['Honduras', 'Tegucigalpa', 'America', "hn"],
// ['Hungary', 'Budapest', 'Europe', "hu"],
// ['Iceland', 'Reykjavík', 'Europe', "is"],
// ['India', 'New Delhi', 'Asia', "in"],
// ['Indonesia', 'Jakarta', 'Asia', "id"],
// ['Iran', 'Tehran', 'Asia', "ir"],
// ['Iraq', 'Baghdad', 'Asia', "iq"],
// ['Ireland', 'Dublin', 'Europe', "ie"],
// ['Israel', 'Jerusalem', 'Asia', "il"],
// ['Italy', 'Rome', 'Europe', "it"],
// ['Ivory Coast', 'Yamoussoukro', 'Africa', "ci"],
// ['Jamaica', 'Kingston', 'America',"jm"],
// ['Japan', 'Tokyo', 'Asia', "jp"],
// ['Jordan', 'Amman', 'Asia', "jo"],
// ['Kazakhstan', 'Astana', 'Asia', "kz"],
// ['Kenya', 'Nairobi', 'Africa', "ke"],
// ['Kiribati', 'Tarawa', 'Oceania', "ki"],
// ['North Korea', 'Pyongyang','Asia', "kp"],
// ['South Korea', 'Seoul', 'Asia', "kp"],
// ['Kosovo', 'Pristina', 'Europe', "xk"],
// ['Kuwait', 'Kuwait City', 'Asia', "kw"],
// ['Kyrgyzstan', 'Bishkek', 'Asia', "kg"],
// ['Laos', 'Vientiane', 'Asia', "la"],
// ['Latvia', 'Riga', 'Europe', "lv"],
// ['Lebanon', 'Beirut', 'Asia', "lb"],
// ['Lesotho', 'Maseru', 'Africa', "ls"],
// ['Liberia', 'Monrovia', 'Africa', "lr"],
// ['Libya', 'Tripoli', 'Africa', "ly"],
// ['Liechtenstein', 'Vaduz', 'Europe', "li"],
// ['Lithuania', 'Vilnius', 'Europe', "lt"],
// ['Luxembourg', 'Luxembourg', 'Europe', "lu"],
// ['Madagascar', 'Antananarivo', 'Africa', "mg"],
// ['Malawi', 'Lilongwe', 'Africa', "mw"],
// ['Malaysia', 'Kuala Lumpur', 'Asia', "my"],
// ['Maldives', 'Malé', 'Asia', "mv"],
// ['Mali', 'Bamako', 'Africa', "ml"],
// ['Malta', 'Valletta', 'Europe', "mt"],
// ['Marshall Islands', 'Majuro', 'Oceania', "mh"],
// ['Mauritania', 'Nouakchott', 'Africa', "mr"],
// ['Mauritius', 'Port Louis', 'Africa', "mu"],
// ['Mexico', 'Mexico City', 'America', "mx"],
// ['Micronesia', 'Palikir', 'Oceania', "fm"],
// ['Moldova', 'Chisinau', 'Europe', "md"],
// ['Monaco', 'Monaco', 'Europe', "mc"],
// ['Mongolia', 'Ulaanbaatar', 'Asia', "mn"],
// ['Montenegro', 'Podgorica', 'Europe', "me"],
// ['Morocco', 'Rabat', 'Africa', "ma"],
// ['Mozambique', 'Maputo', 'Africa', "mz"],
// ['Myanmar', 'Naypyidaw', 'Asia', "mm"],
// ['Namibia', 'Windhoek', 'Africa', "na"],
// ['Nauru', 'Yaren', 'Oceania', "nr"],
// ['Nepal', 'Kathmandu', 'Asia', "np"],
// ['Netherlands', 'Amsterdam', 'Europe', "nl"],
// ['New Zealand', 'Wellington', 'Oceania', "nz"],
// ['Nicaragua', 'Managua', 'America', "ni"],
// ['Niger', 'Niamey', 'Africa', "ne"],
// ['Nigeria', 'Abuja', 'Africa', "ng"],
// ['North Macedonia', 'Skopje', 'Europe', "mk"],
// ['Norway', 'Oslo', 'Europe', "no"],
// ['Oman', 'Muscat', 'Asia', "om"],
// ['Pakistan', 'Islamabad', 'Asia', "pk"],
// ['Palau', 'Melekeok', 'Oceania', "pw"],
// ['Palestine', 'East Jerusalem', 'Asia', "ps"],
// ['Panama', 'Panama City', 'America', "pa"],
// ['Papua New Guinea', 'Port Moresby', 'Oceania', "pg"],
// ['Paraguay', 'Asunción', 'America', "py"],
// ['Peru', 'Lima', 'America', "pe"],
// ['Philippines', 'Manila', 'Asia', "ph"],
// ['Poland', 'Warsaw', 'Europe', "pl"],
// ['Portugal', 'Lisbon', 'Europe', "pt"],
// ['Qatar', 'Doha', 'Asia', "qa"],
// ['Republic of the Congo', 'Brazzaville', 'Africa', "cg"],
// ['Romania', 'Bucharest', 'Europe', "ro"],
// ['Russia', 'Moscow', 'Europe', "ru"],
// ['Rwanda', 'Kigali', 'Africa', "rw"],
// ['Saint Kitts and Nevis', 'Basseterre', 'America', "kn"],
// ['Saint Lucia', 'Castries', 'America', "lc"],
// ['Saint Vincent and the Grenadines', 'Kingstown', 'America', "vc"],
// ['Samoa', 'Apia', 'Oceania', "ws"],
// ['San Marino', 'San Marino', 'Europe', "sm"],
// ['São Tomé and Príncipe', 'São Tomé', 'Africa', "st"],
// ['Saudi Arabia', 'Riyadh', 'Asia', "sa"],
// ['Senegal', 'Dakar', 'Africa', "sn"],
// ['Serbia', 'Belgrade', 'Europe', "rs"],
// ['Seychelles', 'Victoria', 'Africa', "sc"],
// ['Sierra Leone', 'Freetown', 'Africa', "sl"],
// ['Singapore', 'Singapore', 'Asia', "sg"],
// ['Slovakia', 'Bratislava', 'Europe', "sk"],
// ['Slovenia', 'Ljubljana', 'Europe', "si"],
// ['Solomon Islands', 'Honiara', 'Oceania', "sb"],
// ['Somalia', 'Mogadishu', 'Africa', "so"],
// ['South Africa', 'Pretoria', 'Africa', "za"],
// ['South Sudan', 'Juba', 'Africa', "ss"],
// ['Spain', 'Madrid', 'Europe', "es"],
// ['Sri Lanka', 'Sri Jayawardenapura Kotte', 'Asia', "lk"],
// ['Sudan', 'Khartoum', 'Africa', "sd"],
// ['Suriname', 'Paramaribo', 'America', "sr"],
// ['Sweden', 'Stockholm', 'Europe', "se"],
// ['Switzerland', 'Bern', 'Europe', "ch"],
// ['Syria', 'Damascus', 'Asia', "sy"],
// ['Taiwan', 'Taipei', 'Asia', "tw"],
// ['Tajikistan', 'Dushanbe', 'Asia', "tj"],
// ['Tanzania', 'Dodoma', 'Africa', "tz"],
// ['Thailand', 'Bangkok', 'Asia', "th"],
// ['Togo', 'Lomé', 'Africa', "tg"],
// ['Tonga', 'Nukualofa', 'Oceania', "to"],
// ['Trinidad and Tobago', 'Port of Spain', 'America', "tt"],
// ['Tunisia', 'Tunis', 'Africa', "tn"],
// ['Turkey', 'Ankara', 'Asia', "tr"],
// ['Turkmenistan', 'Ashgabat', 'Asia', "tm"],
// ['Tuvalu', 'Funafuti', 'Oceania', "tv"],
// ['Uganda', 'Kampala', 'Africa', "ug"],
// ['Ukraine', 'Kiev', 'Europe', "ua"],
// ['United Arab Emirates', 'Abu Dhabi', 'Asia', "ae"],
// ['United Kingdom', 'London', 'Europe', "gb"],
// ['United States', 'Washington D.C.', 'America', "us"],
// ['Uruguay', 'Montevideo', 'America', "uy"],
// ['Uzbekistan', 'Tashkent', 'Asia', "uz"],
// ['Vanuatu', 'Port Vila', 'Oceania', "vu"],
// ['Vatican City', 'Vatican City', 'Europe', "va"],
// ['Venezuela', 'Caracas', 'America', "ve"],
// ['Vietnam', 'Hanoi', 'Asia', "vn"],
// ['Yemen', "Sana'a", 'Asia', "ye"],
// ['Zambia', 'Lusaka', 'Africa', "zm"],
// ['Zimbabwe', 'Harare', 'Africa', "zw"]
// ];

// let asia1 = [],
//     europe1 = [],
//     oceania1 = [],
//     america1 = [],
//     africa1 = [];

// asia1 = allCountries.filter(function(name) {
//     return name[2] == "Asia"})
// europe1 = allCountries.filter(function(name) {
//     return name[2] == "Europe"})
// oceania1 = allCountries.filter(function(name) {
//     return name[2] == "Ocenia"})
// america1 = allCountries.filter(function(name) {
//     return name[2] == "America"})
// africa1 = allCountries.filter(function(name) {
//     return name[2] == "Africa"})

// //test
// let randomNumber = randomNum();
// let userAnswer = [],
//     position;
// function randomNum() {
//   let  countryNum = Math.floor( Math.random() * allCountries.length);
//     //console.log(countryNum);
//     return countryNum;
// }

// function randomPosition() {
//     position = Math.floor( Math.random() * 4);
//     return position;
// }

// randomPosition();

// function raplaceFlag(num) {
//     const img = document.querySelector('.main__game img');
//     img.src = `img/svg/${allCountries[num][3]}.svg`;
// }

// function changePosition(arrPos, switchCategory, randomNumber, position) {
//     let categoryArr = [];
//     switchCategory.forEach((element, i) => {

//         if(i == position) {
//             element.innerHTML = allCountries[randomNumber][arrPos];
//             console.log(allCountries[randomNumber][arrPos]);
//             console.log("test22");
//             categoryArr.push(element.innerHTML);
//             //console.log(allCountries[countryNum][arrPos]);

//         } else {
//             element.innerHTML = allCountries[randomNum(allCountries)][arrPos];
//             categoryArr.push(element.innerHTML);
//         }

//         console.log(categoryArr);

//     });

// // test and repeat answers options if 2 or more same answers
//     if(categoryArr[0] == categoryArr[1] || categoryArr[0] == categoryArr[2] ||
//         categoryArr[0] == categoryArr[3] || categoryArr[1] == categoryArr[2]||
//         categoryArr[1] == categoryArr[3] || categoryArr[2] == categoryArr[3 ]) {
//             changePosition(arrPos, switchCategory, randomNumber, position);
//         }
// }
// let tu = 0,
//     be = 1;

// function change(num) {
//     console.log(allCountries[num]);
//     changePosition(tu, countries, randomNumber, position = randomPosition());
//     changePosition(be, capitals, randomNumber, position = randomPosition());
//     raplaceFlag(num);

// }

// change(randomNumber);

// function addActiv() {
//     countries.forEach((element, i)=> {
//         countries[i].style.background = "green";
//     });

// }

// function removeAnswerClass(className, itemsCategory) {
//     itemsCategory.forEach(element => {
//         element.classList.remove(className);

//     });
// }

// function ty(e, checkClass, activeClass, selectItems) {
//     if(e.target && e.target.classList.contains(checkClass)) {
//         selectItems.forEach((item) => {
//             if(e.target == item) {
//                 removeAnswerClass(activeClass, selectItems);
//                 item.classList.add(activeClass);
//             }
//         });
//     }
// }

// function addAndRemoveActiveClass (itemsContainer, checkClass, activeClass, selectItems) {
//     itemsContainer.addEventListener("click", (e) =>  ty(e, checkClass, activeClass, selectItems)
//     );
// }

// addAndRemoveActiveClass(capitalsBox, "capital", "capital-answer", capitals);
// addAndRemoveActiveClass(countriesBox, "countries", "country-answer", countries);
// addAndRemoveActiveClass(worldPartBox, "worldPart", "worldPart-answer", worldPart);

// function showTrueAnswer (category, categoryArrNum, checkClass, addClass) {
//     category.forEach(element => {
//             console.log(`${allCountries[randomNumber][categoryArrNum]} test yt`);
//             if(element.innerHTML == allCountries[randomNumber][categoryArrNum]) {
//                 element.classList.add(addClass);
//                 element.classList.remove(checkClass);

//         }
//         else if(element.classList.contains(checkClass)) {
//             element.classList.add("wrong-answer");
//         }
//         element.classList.add("no-active");
//     });
// }

// function checkAnswer () {
//     console.log(document.querySelector(".country-answer"));
//     userAnswer[0] = document.querySelector(".country-answer").innerHTML;
//     userAnswer[1] = document.querySelector(".capital-answer").innerHTML;
//     userAnswer[2] = document.querySelector(".worldPart-answer").innerHTML;
//     countriesBox.classList.add("user-answer");

//     if(userAnswer[0] == allCountries[randomNumber][0]) {
//         console.log("ye");
//     }
//    console.log(userAnswer[0]);
//    console.log(allCountries[randomNumber][0]);
//     for(let i = 0; i < 3; i++) {
//         console.log(userAnswer[i]);
//         if(userAnswer[i] == allCountries[randomNumber][i]) {
//             showTrueAnswer (countries, 0, "country-answer", "true-answer");
//             showTrueAnswer (capitals, 1, "capital-answer", "true-answer");
//             showTrueAnswer (worldPart, 2, "worldPart-answer", "true-answer");
//         } else {
//             showTrueAnswer (countries, 0, "country-answer", "true-answer");
//             showTrueAnswer (capitals, 1, "capital-answer", "true-answer");
//             showTrueAnswer (worldPart, 2, "worldPart-answer", "true-answer");
//             console.log(userAnswer[i]);
//             console.log(`${userAnswer[i]} false`);
//         }

//     }
//     answer.removeEventListener("click", checkAnswer);
//     countriesBox.classList.add("answer-submit");
//     btnNext.addEventListener("click", next);
// }

// let allAnswer = false;

// function checkAnswerValue(category, checkClass) {
//     let answer111;
//     category.forEach(element => {
//         if(element.classList.contains(checkClass)) {
//             console.log("test class contains");
//            answer111 = true;

//         }

//     });
//     return answer111;
// }
// // if(checkAnswerValue(countries, "country-answer") && checkAnswerValue(capitals, "capital-answer") && checkAnswerValue(worldPart, "worldPart-answer")) {
// //     answer.addEventListener("click", checkAnswer);
// // }
// // answer.addEventListener("click", checkAnswer);
// mainGameBox.addEventListener("click", () => {
//     console.log("yeee true");
//     console.log(checkAnswerValue(countries, "country-answer"));
//     if(checkAnswerValue(countries, "country-answer") && checkAnswerValue(capitals, "capital-answer") &&
//     checkAnswerValue(worldPart, "worldPart-answer")) {
//         answer.addEventListener("click", checkAnswer);
//         console.log("test aboba");
//         //btnNext.addEventListener("click", next);
//         if(countriesBox.classList.contains("user-answer")) {
//             answer.removeEventListener("click", checkAnswer);
//         }
//         if(countriesBox.classList.contains("answer-submit")) {
//             console.log("tessssstttt");
//             btnNext.addEventListener("click", next);
//         }

//     }

// });

// console.log(randomNumber);
// console.log(allCountries[randomNumber]);
//  console.log(checkAnswerValue(countries, "country-answer"));

// function next() {
//     change(randomNumber = randomNum());
//     addAndRemoveActiveClass(countriesBox, "countries", "country-answer", countries);
//     addAndRemoveActiveClass(capitalsBox, "capital", "capital-answer", capitals);
//     addAndRemoveActiveClass(worldPartBox, "worldPart", "worldPart-answer", worldPart);
//     removeAnswerClass("country-answer", countries);
//     removeAnswerClass("wrong-answer", countries);
//     removeAnswerClass("true-answer", countries);
//     removeAnswerClass("no-active", countries);
//     removeAnswerClass("capital-answer", capitals);
//     removeAnswerClass("wrong-answer",  capitals);
//     removeAnswerClass("true-answer",  capitals);
//     removeAnswerClass("no-active", capitals);
//     removeAnswerClass("worldPart-answer", worldPart);
//     removeAnswerClass("wrong-answer", worldPart);
//     removeAnswerClass("true-answer", worldPart);
//     removeAnswerClass("no-active", worldPart);
//     countriesBox.classList.remove("user-answer");
//     countriesBox.classList.remove("answer-submit");
//     btnNext.removeEventListener("click", next);
// }

// //animation
// window.onload = function() {
//     Particles.init({
//          selector: '.background',
//          color: ['#e998b4', '#c9fffb', '#e0c9ff'],
//          connectParticles: true,
//          speed: 0.5

//      });
//    };
